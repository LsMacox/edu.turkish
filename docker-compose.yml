services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # ⬇️ отключим prerender во время docker build
        NITRO_PRERENDER: 'false'
    container_name: edu_turkish_app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      DATABASE_URL: mysql://${DB_USER}:${DB_PASSWORD}@mysql:3306/${DB_NAME}
      NODE_ENV: production

      # Интеграция с Directus
      NUXT_PUBLIC_DIRECTUS_URL: ${DIRECTUS_PUBLIC_URL:-http://localhost:8055}

      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-}

      # Nitro/NUXT сетевые
      NITRO_HOST: 0.0.0.0
      NITRO_PORT: 3000
    ports:
      - '3000:3000'
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - edu_turkish_network

  caddy:
    image: caddy:2.8-alpine
    container_name: edu_turkish_caddy
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Email for Let's Encrypt
      CADDY_ACME_EMAIL: ${CADDY_ACME_EMAIL:-admin@example.com}
      # Domains to serve
      APP_DOMAIN: ${APP_DOMAIN:-edu-turkish.local}
      DIRECTUS_DOMAIN: ${DIRECTUS_DOMAIN:-cms.edu-turkish.local}
    depends_on:
      app:
        condition: service_started
      directus:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./contrib/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - edu_turkish_network

  mysql:
    image: mysql:8.0
    container_name: edu_turkish_mysql
    restart: unless-stopped
    environment:
      # Общие учётные данные (можешь развести на разные при желании)
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password_123}
      MYSQL_USER: ${DB_USER:-edu_turkish_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secure_password_123}

      # Какой БД создать по умолчанию при первом старте (используется и приложением, и Directus):
      MYSQL_DATABASE: ${APP_DB_NAME:-edu_turkish}
    ports:
      - '${DB_PORT:-3306}:3306'
    volumes:
      - mysql_data:/var/lib/mysql
      - ./contrib/sql/init:/docker-entrypoint-initdb.d
    networks:
      - edu_turkish_network
    healthcheck:
      test:
        [
          'CMD',
          'mysqladmin',
          'ping',
          '-h',
          '127.0.0.1',
          '-u',
          'edu_turkish_user',
          '-psecure_password_123',
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  adminer:
    image: adminer
    container_name: edu_turkish_adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - edu_turkish_network

  directus:
    image: directus/directus:latest
    container_name: edu_turkish_directus
    restart: unless-stopped
    ports:
      - '8055:8055'
    env_file:
      - .env
    environment:
      # Ключи (замени в проде)
      KEY: ${DIRECTUS_KEY:-insecure_local_key}
      SECRET: ${DIRECTUS_SECRET:-insecure_local_secret}

      DB_CLIENT: mysql
      DB_HOST: ${DB_HOST:-mysql}
      DB_PORT: ${DB_PORT:-3306}
      DB_DATABASE: ${DB_NAME}
      DB_USER: root
      DB_PASSWORD: ${DB_ROOT_PASSWORD:-root_password_123}

      # Directus базовые настройки
      WEBSOCKETS_ENABLED: 'true'
      ADMIN_EMAIL: ${DIRECTUS_ADMIN_EMAIL:-admin@example.com}
      ADMIN_PASSWORD: ${DIRECTUS_ADMIN_PASSWORD:-ChangeMe123!}
      CORS_ENABLED: 'true'
      # Разрешим локальный фронт и домен контейнера (на всякий случай host.docker.internal)
      CORS_ORIGIN: 'http://localhost:3000,http://host.docker.internal:3000'
      PUBLIC_URL: ${DIRECTUS_PUBLIC_URL:-http://localhost:8055}
      STORAGE_LOCATIONS: local
    volumes:
      - directus_uploads:/directus/uploads
      # Монтируем директорию схемы/конфига из репозитория внутрь контейнера
      - ./directus:/project/directus
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - edu_turkish_network

volumes:
  mysql_data:
    driver: local
  directus_uploads:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

networks:
  edu_turkish_network:
    driver: bridge
