name: CI / CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test -- --run
        env:
          NODE_ENV: test

      - name: Build
        run: npm run build
        env:
          NODE_ENV: production

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$SERVER_HOST" >> ~/.ssh/known_hosts
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}

      - name: Copy env to server
        if: ${{ secrets.DEPLOY_ENV_FILE != '' }}
        run: |
          echo "$DEPLOY_ENV_FILE" > /tmp/.env
          scp -o StrictHostKeyChecking=no /tmp/.env $SERVER_USER@$SERVER_HOST:$REMOTE_PATH/.env
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
          DEPLOY_ENV_FILE: ${{ secrets.DEPLOY_ENV_FILE }}

      - name: Deploy over SSH
        run: |
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST <<'SSH'
            set -euo pipefail
            cd "$REMOTE_PATH"
            if [ ! -d .git ]; then
              git clone "$GIT_REPO" .
            fi
            git fetch --all --prune
            git checkout "$GIT_BRANCH"
            git pull --ff-only origin "$GIT_BRANCH"
            docker compose pull || true
            docker compose build --pull app
            docker compose up -d --remove-orphans app mysql directus
            docker image prune -f || true
          SSH
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
          GIT_REPO: ${{ secrets.GIT_REPO }}
          GIT_BRANCH: main
