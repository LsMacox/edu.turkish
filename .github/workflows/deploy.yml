name: Deploy

on:
  push:
    branches: ['main']
  workflow_dispatch:
    inputs:
      run_migrations:
        description: 'Run Prisma migrations on the production environment'
        type: boolean
        default: false

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Set APP_TAG (short SHA)
        run: echo "APP_TAG=${GITHUB_SHA::7}" >> "$GITHUB_ENV"

      - name: Show planned tag
        run: echo "APP_TAG=$APP_TAG"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Run typecheck
        run: pnpm run typecheck

      - name: Run tests
        run: pnpm run test

      - name: Prepare SSH key
        if: success()
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add host to known_hosts (optional)
        if: success()
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts || true
          chmod 600 ~/.ssh/known_hosts || true

      - name: Remote deploy over SSH
        if: success()
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: root
          SSH_PORT: ${{ secrets.SSH_PORT }}
          APP_TAG: ${{ env.APP_TAG }}
        run: |
          set -euo pipefail
          echo "Deploying commit $APP_TAG to $SSH_HOST"

          ssh -o StrictHostKeyChecking=no -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" 'bash -s' << 'EOF'
          set -euo pipefail

          APP_DIR="/root/apps/edu.turkish"
          export DOCKER_BUILDKIT=1
          export APP_TAG="${APP_TAG:-main}"

          cd "$APP_DIR"

          git fetch origin main
          git reset --hard origin/main

          echo "[CLEANUP] pruning old images"
          docker image prune -f --filter "until=168h" || true
          docker builder prune -f --filter "until=168h" || true

          echo "[BUILD] building app image with tag ${APP_TAG}"
          docker compose build --pull app
          docker compose up -d --remove-orphans app

          echo "[CLEANUP] pruning unused data"
          docker image prune -af || true
          docker builder prune -af || true
          EOF

      - name: Purge Bunny CDN cache
        if: success()
        env:
          BUNNY_API_KEY: ${{ secrets.BUNNY_API_KEY }}
          BUNNY_APP_ZONE_ID: ${{ secrets.BUNNY_APP_ZONE_ID }}
        run: |
          if [ -z "${BUNNY_API_KEY:-}" ] || [ -z "${BUNNY_APP_ZONE_ID:-}" ]; then
            echo "Bunny CDN secrets are not configured. Skipping purge."
            exit 0
          fi

          echo "Purging Bunny CDN cache for zone ${BUNNY_APP_ZONE_ID}"
          curl -fsS -X POST "https://api.bunny.net/pullzone/${BUNNY_APP_ZONE_ID}/purgeCache" \
            -H "AccessKey: ${BUNNY_API_KEY}"

      - name: Run Prisma migrations (manual trigger)
        if: github.event_name == 'workflow_dispatch' && (github.event.inputs.run_migrations == 'true' || github.event.inputs.run_migrations == true)
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: root
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          set -euo pipefail
          echo "Running pnpm run db:deploy on $SSH_HOST"

          ssh -o StrictHostKeyChecking=no -p "${SSH_PORT:-22}" "${SSH_USER}@${SSH_HOST}" 'bash -s' << 'EOF'
          set -euo pipefail

          APP_DIR="/root/apps/edu.turkish"
          cd "$APP_DIR"

          pnpm run db:deploy
          EOF
