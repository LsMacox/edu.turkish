import type { EspoCRMLead, EspoCRMCall } from '~~/server/types/espocrm-webhook'

/**
 * Telegram Message Formatter
 * 
 * Formats EspoCRM entities into HTML-formatted Telegram messages
 */

/**
 * Escape HTML special characters for Telegram
 */
export function escapeHtml(text: string): string {
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;')
}

/**
 * Format duration in seconds as MM:SS
 */
export function formatDuration(seconds: number): string {
  const minutes = Math.floor(seconds / 60)
  const secs = seconds % 60
  return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
}

/**
 * Format ISO datetime string as DD.MM.YYYY HH:mm
 */
export function formatDateTime(isoString: string): string {
  const date = new Date(isoString)
  const day = date.getDate().toString().padStart(2, '0')
  const month = (date.getMonth() + 1).toString().padStart(2, '0')
  const year = date.getFullYear()
  const hours = date.getHours().toString().padStart(2, '0')
  const minutes = date.getMinutes().toString().padStart(2, '0')
  return `${day}.${month}.${year} ${hours}:${minutes}`
}

/**
 * Truncate text to max length and add ellipsis if needed
 */
export function truncateText(text: string, maxLength: number): string {
  if (text.length <= maxLength) {
    return text
  }
  return text.substring(0, maxLength) + '...'
}

/**
 * Translate call status to Russian
 */
export function translateStatus(status: string): string {
  const translations: Record<string, string> = {
    Planned: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
    Held: '–°–æ—Å—Ç–æ—è–ª—Å—è',
    'Not Held': '–ù–µ —Å–æ—Å—Ç–æ—è–ª—Å—è',
  }
  return translations[status] || status
}

/**
 * Translate call direction to Russian
 */
export function translateDirection(direction: string): string {
  const translations: Record<string, string> = {
    Outbound: '–ò—Å—Ö–æ–¥—è—â–∏–π',
    Inbound: '–í—Ö–æ–¥—è—â–∏–π',
  }
  return translations[direction] || direction
}

/**
 * Format lead notification message for Telegram
 */
export function formatLeadNotification(lead: EspoCRMLead): string {
  const lines: string[] = ['üÜï <b>–ù–æ–≤—ã–π –ª–∏–¥</b>', '']

  // Name
  const fullName = [lead.firstName, lead.lastName].filter(Boolean).join(' ')
  if (fullName) {
    lines.push(`üë§ <b>–ò–º—è:</b> ${escapeHtml(fullName)}`)
  } else if (lead.name) {
    lines.push(`üë§ <b>–ò–º—è:</b> ${escapeHtml(lead.name)}`)
  }

  // Phone
  if (lead.phoneNumber) {
    lines.push(`üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${escapeHtml(lead.phoneNumber)}`)
  }

  // Email
  if (lead.emailAddress) {
    lines.push(`üìß <b>Email:</b> ${escapeHtml(lead.emailAddress)}`)
  }

  // Company
  if (lead.accountName) {
    lines.push(`üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${escapeHtml(lead.accountName)}`)
  }

  // Source
  if (lead.source) {
    lines.push(`üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${escapeHtml(lead.source)}`)
  }

  // Status
  if (lead.status) {
    lines.push(`üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${escapeHtml(lead.status)}`)
  }

  // Description (truncated to 200 chars)
  if (lead.description) {
    const truncated = truncateText(lead.description, 200)
    lines.push(`üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${escapeHtml(truncated)}`)
  }

  // Assigned user
  if (lead.assignedUserName) {
    lines.push(`üë®‚Äçüíº <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${escapeHtml(lead.assignedUserName)}`)
  }

  // Timestamp
  if (lead.createdAt) {
    lines.push(`‚è∞ <b>–í—Ä–µ–º—è:</b> ${formatDateTime(lead.createdAt)}`)
  }

  return lines.join('\n')
}

/**
 * Format call activity notification message for Telegram
 */
export function formatCallNotification(call: EspoCRMCall): string {
  const lines: string[] = ['üìû <b>–ù–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫</b>', '']

  // Contact name (prefer contactName, fallback to parentName)
  const contactName = call.contactName || call.parentName
  if (contactName) {
    lines.push(`üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${escapeHtml(contactName)}`)
  }

  // Phone
  if (call.phoneNumber) {
    lines.push(`üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${escapeHtml(call.phoneNumber)}`)
  }

  // Status (translated)
  if (call.status) {
    lines.push(`üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${translateStatus(call.status)}`)
  }

  // Direction (translated)
  if (call.direction) {
    lines.push(`‚ÜîÔ∏è <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> ${translateDirection(call.direction)}`)
  }

  // Duration (formatted as MM:SS)
  if (call.duration !== undefined) {
    lines.push(`‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${formatDuration(call.duration)}`)
  }

  // Description (truncated to 300 chars)
  if (call.description) {
    const truncated = truncateText(call.description, 300)
    lines.push(`üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> ${escapeHtml(truncated)}`)
  }

  // Assigned user
  if (call.assignedUserName) {
    lines.push(`üë®‚Äçüíº <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> ${escapeHtml(call.assignedUserName)}`)
  }

  // Timestamp (use dateStart if available, otherwise createdAt)
  const timestamp = call.dateStart || call.createdAt
  if (timestamp) {
    lines.push(`‚è∞ <b>–í—Ä–µ–º—è:</b> ${formatDateTime(timestamp)}`)
  }

  return lines.join('\n')
}
