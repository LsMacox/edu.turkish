// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==========================================
// University Management Tables
// ==========================================

model University {
  // Базовые поля
  id                    Int       @id @default(autoincrement())
  
  // Локация и основание
  /// Ссылка на страну (нормализовано для фильтров и поиска)
  countryId           Int?
  /// Ссылка на город (нормализовано для фильтров и поиска)
  cityId              Int?
  foundedYear         Int?      @map("founded_year")
  
  // Тип и статус
  type                UniversityType @default(state)
  
  // Стоимость обучения (нормализованная)
  tuitionMin          Decimal?  @map("tuition_min") @db.Decimal(10, 2)
  tuitionMax          Decimal?  @map("tuition_max") @db.Decimal(10, 2)
  currency            String?   @db.VarChar(3) @default("USD")
  
  // Статистика студентов (нормализованная)
  totalStudents       Int?      @map("total_students")
  internationalStudents Int?    @map("international_students")
  
  // Рейтинг и признание (нормализованный)
  /// Числовой балл для сортировки/фильтрации (если доступен)
  rankingScore        Int?
  
  // Проживание и инфраструктура (нормализованные)
  hasAccommodation    Boolean   @default(false) @map("has_accommodation")
  /// Денормализованный флаг наличия стипендий для быстрых фильтров
  hasScholarships     Boolean   @default(false) @map("has_scholarships")
  
  // Изображения
  /// Обложка и основное изображение на уровне университета
  heroImage           String?   @map("hero_image") @db.VarChar(500)
  image               String?   @db.VarChar(500)
  
  // JSON поля для дополнительной информации
  /// Локализуемые тексты перенесены в таблицу переводов
  
  // Метаданные
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  translations        UniversityTranslation[]
  academicPrograms    AcademicProgram[]
  reviews             Review[]
  campusFacilities    CampusFacility[]
  admissionRequirements AdmissionRequirement[]
  requiredDocuments   RequiredDocument[]
  importantDates      ImportantDate[]
  scholarships        Scholarship[]
  universityDirections UniversityDirection[]
  media               UniversityMedia[]
  /// Нормализованные связи локации
  country             Country?  @relation(fields: [countryId], references: [id], onDelete: SetNull)
  city                City?     @relation(fields: [cityId], references: [id], onDelete: SetNull)

  @@map("universities")
  // Индексы для основных фильтров
  @@index([type], map: "idx_university_type")
  @@index([countryId], map: "idx_university_country")
  @@index([cityId], map: "idx_university_city")
  @@index([hasAccommodation], map: "idx_university_accommodation")
  @@index([hasScholarships], map: "idx_university_scholarships")
  @@index([foundedYear], map: "idx_university_founded_year")
  @@index([tuitionMin, tuitionMax, currency], map: "idx_university_tuition")
  @@index([totalStudents], map: "idx_university_total_students")
  @@index([internationalStudents], map: "idx_university_international_students")
  @@index([rankingScore], map: "idx_university_ranking_score")
}

model UniversityTranslation {
  id               Int        @id @default(autoincrement())
  universityId     Int        @map("university_id")
  locale           String     @db.VarChar(5)
  /// Заголовок и описание (локализованные)
  title            String?    @db.VarChar(255)
  description      String?    @db.Text
  /// Локализованный slug для SEO и маршрутизации
  slug             String     @db.VarChar(255)
  /// Локализованные тексты о университете
  about            Json?      // {history, mission, vision}
  /// Сильные программы (локализованные категории/названия)
  strongPrograms   Json?      @map("strong_programs") // [{category, programs[]}]
  // Локализованные тексты для блока "Ключевая информация"
  keyInfoTexts    Json?      @map("key_info_texts")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")

  // Relations
  university       University @relation(fields: [universityId], references: [id], onDelete: Cascade)

  @@unique([universityId, locale], name: "unique_translation")
  @@unique([locale, slug], name: "unique_university_slug_per_locale")
  @@map("university_translations")
}

// Удалено как дублирующее необходимость переводов/языков обучения

// ==========================================
// Location (Country/City) with Translations
// ==========================================

model Country {
  /// Справочник стран
  id          Int                  @id @default(autoincrement())
  code        String               @unique @db.VarChar(3) // ISO Alpha-3
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")

  // Relations
  translations CountryTranslation[]
  cities       City[]
  universities University[]

  @@map("countries")
}

model CountryTranslation {
  id         Int      @id @default(autoincrement())
  countryId  Int      @map("country_id")
  locale     String   @db.VarChar(5)
  name       String   @db.VarChar(100)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  country    Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@unique([countryId, locale])
  @@index([locale, name], map: "idx_country_locale_name")
  @@map("country_translations")
}

model City {
  /// Справочник городов (привязаны к стране)
  id          Int               @id @default(autoincrement())
  countryId   Int               @map("country_id")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  // Relations
  country     Country           @relation(fields: [countryId], references: [id], onDelete: Cascade)
  translations CityTranslation[]
  universities University[]

  @@map("cities")
  @@index([countryId], map: "idx_city_country")
}

model CityTranslation {
  id        Int      @id @default(autoincrement())
  cityId    Int      @map("city_id")
  locale    String   @db.VarChar(5)
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  city      City     @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@unique([cityId, locale])
  @@index([locale, name], map: "idx_city_locale_name")
  @@map("city_translations")
}

// ==========================================
// University Media (gallery/video) with Translations
// ==========================================

model UniversityMedia {
  id            Int        @id @default(autoincrement())
  universityId  Int        @map("university_id")
  /// Тип медиа (изображение/видео)
  kind          MediaKind  @map("kind")
  url           String     @db.VarChar(500)
  thumbnailUrl  String?    @map("thumbnail_url") @db.VarChar(500)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // Relations
  university    University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  translations  UniversityMediaTranslation[]

  @@map("university_media")
  @@index([universityId], map: "idx_media_university")
}

model UniversityMediaTranslation {
  id          Int               @id @default(autoincrement())
  mediaId     Int               @map("media_id")
  locale      String            @db.VarChar(5)
  title       String?           @db.VarChar(255)
  alt         String?           @db.VarChar(255)
  caption     String?           @db.Text
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  // Relations
  media       UniversityMedia   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([mediaId, locale])
  @@map("university_media_translations")
}

// ==========================================
// Academic Programs
// ==========================================

model AcademicProgram {
  id              Int        @id @default(autoincrement())
  universityId    Int        @map("university_id")
  degreeType      DegreeType @map("degree_type")
  languageCode    String     @db.VarChar(5)
  durationYears   Int        @map("duration_years")
  tuitionPerYear  Decimal    @map("tuition_per_year") @db.Decimal(10, 2)
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  // Relations
  university      University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  translations    ProgramTranslation[]

  @@map("academic_programs")
  // Индексы для фильтров
  @@index([universityId, degreeType], map: "idx_program_university_degree")
  @@index([languageCode], map: "idx_program_language")
  @@index([tuitionPerYear], map: "idx_program_tuition")
}

model ProgramTranslation {
  id          Int             @id @default(autoincrement())
  programId   Int             @map("program_id")
  locale      String          @db.VarChar(5)
  name        String?         @db.VarChar(255)
  description String?         @db.Text
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Relations
  program     AcademicProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([programId, locale])
  @@map("program_translations")
}

// ==========================================
// Reviews System
// ==========================================

model Review {
  id           Int          @id @default(autoincrement())
  universityId Int?         @map("university_id")
  type         ReviewType
  year         Int?
  rating       Int?         @db.TinyInt
  avatar       String?      @db.VarChar(500)
  featured     Boolean      @default(false)
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  university   University?  @relation(fields: [universityId], references: [id], onDelete: SetNull)
  translations ReviewTranslation[]

  @@map("reviews")
  @@index([universityId, type], map: "idx_review_university_type")
  @@index([featured], map: "idx_review_featured")
  @@index([rating], map: "idx_review_rating")
}

model ReviewTranslation {
  id             Int      @id @default(autoincrement())
  reviewId       Int      @map("review_id")
  locale         String   @db.VarChar(5)
  name           String?  @db.VarChar(255)
  quote          String?  @db.Text
  universityName String?  @map("university_name") @db.VarChar(255)
  achievements   Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  review         Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([reviewId, locale])
  @@map("review_translations")
}

// ==========================================
// FAQ System
// ==========================================

model FaqItem {
  id           Int      @id @default(autoincrement())
  categoryId   Int?
  featured     Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  translations FaqTranslation[]
  category     FaqCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("faq_items")
}

model FaqTranslation {
  id           Int      @id @default(autoincrement())
  faqId        Int      @map("faq_id")
  locale       String   @db.VarChar(5)
  question     String?  @db.VarChar(500)
  answer       String?  @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  faqItem      FaqItem  @relation(fields: [faqId], references: [id], onDelete: Cascade)

  @@unique([faqId, locale])
  @@map("faq_translations")
}

// ==========================================
// FAQ Categories
// ==========================================

model FaqCategory {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")

  // Relations
  translations FaqCategoryTranslation[]
  items        FaqItem[]

  @@map("faq_categories")
}

model FaqCategoryTranslation {
  id          Int          @id @default(autoincrement())
  categoryId  Int          @map("category_id")
  locale      String       @db.VarChar(5)
  name        String       @db.VarChar(100)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  category    FaqCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, locale])
  @@index([locale, name], map: "idx_faq_category_locale_name")
  @@map("faq_category_translations")
}

// ==========================================
// Application Management
// ==========================================

model Application {
  id             Int               @id @default(autoincrement())
  trackingCode   String            @unique @map("tracking_code") @db.VarChar(50)
  status         ApplicationStatus @default(submitted)
  personalInfo   Json              @map("personal_info")
  education      Json
  preferences    Json
  additionalInfo Json?             @map("additional_info")
  submittedAt    DateTime          @default(now()) @map("submitted_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")

  @@map("applications")
}

// ==========================================
// Campus Facilities
// ==========================================

model CampusFacility {
  id           Int        @id @default(autoincrement())
  universityId Int        @map("university_id")
  image        String?    @db.VarChar(500)
  // Управление отображением
  isActive     Boolean    @default(true) @map("is_active")
  icon         String?    @db.VarChar(100)
  
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  translations FacilityTranslation[]

  @@map("campus_facilities")
  @@index([universityId, isActive], map: "idx_facility_filters")
}

model FacilityTranslation {
  id           Int            @id @default(autoincrement())
  facilityId   Int            @map("facility_id")
  locale       String         @db.VarChar(5)
  name         String?        @db.VarChar(255)
  description  String?        @db.Text
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  // Relations
  facility     CampusFacility @relation(fields: [facilityId], references: [id], onDelete: Cascade)

  @@unique([facilityId, locale])
  @@map("facility_translations")
}

// Dormitory модели удалены по согласованию

// ==========================================
// Admission Requirements
// ==========================================

model AdmissionRequirement {
  id           Int        @id @default(autoincrement())
  universityId Int        @map("university_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  translations RequirementTranslation[]

  @@map("admission_requirements")
  @@index([universityId], map: "idx_requirement_university")
}

model RequirementTranslation {
  id            Int                  @id @default(autoincrement())
  requirementId Int                  @map("requirement_id")
  locale        String               @db.VarChar(5)
  category      String?              @db.VarChar(100)
  requirement   String?              @db.VarChar(255)
  details       String?              @db.Text
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")

  // Relations
  admissionRequirement AdmissionRequirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  @@unique([requirementId, locale])
  @@map("requirement_translations")
}

// ==========================================
// Required Documents
// ==========================================

model RequiredDocument {
  id                 Int        @id @default(autoincrement())
  universityId       Int        @map("university_id")
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")

  // Relations
  university         University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  translations       DocumentTranslation[]

  @@map("required_documents")
  @@index([universityId], map: "idx_document_university")
}

model DocumentTranslation {
  id                 Int              @id @default(autoincrement())
  documentId         Int              @map("document_id")
  locale             String           @db.VarChar(5)
  name               String?          @db.VarChar(255)
  description        String?          @db.Text
  formatRequirements Json?            @map("format_requirements") // string[]
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")

  // Relations
  document           RequiredDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, locale])
  @@map("document_translations")
}

// ==========================================
// Important Dates
// ==========================================

model ImportantDate {
  id           Int        @id @default(autoincrement())
  universityId Int        @map("university_id")
  date         DateTime   @db.Date
  type         ImportantDateType
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  university   University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  translations DateTranslation[]

  @@map("important_dates")
  @@index([universityId, type, date], map: "idx_date_filters")
}

model DateTranslation {
  id           Int           @id @default(autoincrement())
  dateId       Int           @map("date_id")
  locale       String        @db.VarChar(5)
  event        String?       @db.VarChar(255)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Relations
  importantDate ImportantDate @relation(fields: [dateId], references: [id], onDelete: Cascade)

  @@unique([dateId, locale])
  @@map("date_translations")
}

// ==========================================
// Scholarships
// ==========================================

model Scholarship {
  id                  Int        @id @default(autoincrement())
  universityId        Int        @map("university_id")
  type                ScholarshipType
  coveragePercentage  Int        @map("coverage_percentage")
  applicationDeadline DateTime?  @map("application_deadline") @db.Date
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime   @updatedAt @map("updated_at")

  // Relations
  university          University @relation(fields: [universityId], references: [id], onDelete: Cascade)
  translations        ScholarshipTranslation[]

  @@map("scholarships")
  @@index([universityId, type], map: "idx_scholarship_type")
  @@index([coveragePercentage], map: "idx_scholarship_coverage")
  @@index([applicationDeadline], map: "idx_scholarship_deadline")
}

model ScholarshipTranslation {
  id                  Int         @id @default(autoincrement())
  scholarshipId       Int         @map("scholarship_id")
  locale              String      @db.VarChar(5)
  name                String?     @db.VarChar(255)
  eligibilityCriteria Json?       @map("eligibility_criteria")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")

  // Relations
  scholarship         Scholarship @relation(fields: [scholarshipId], references: [id], onDelete: Cascade)

  @@unique([scholarshipId, locale])
  @@map("scholarship_translations")
}

// ==========================================
// Study Directions
// ==========================================

model StudyDirection {
  id                  Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  // Relations
  universityDirections UniversityDirection[]
  translations        DirectionTranslation[]

  @@map("study_directions")
}

model UniversityDirection {
  id              Int       @id @default(autoincrement())
  universityId    Int       @map("university_id")
  directionId     Int       @map("direction_id")
  
  // Специфичная информация для университета
  durationYears   Int?      @map("duration_years")
  costPerYear     Decimal?  @map("cost_per_year") @db.Decimal(10, 2)
  additionalInfo  Json?     @map("additional_info") // любая доп. информация
  
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  university      University    @relation(fields: [universityId], references: [id], onDelete: Cascade)
  direction       StudyDirection @relation(fields: [directionId], references: [id], onDelete: Cascade)

  @@unique([universityId, directionId])
  @@map("university_directions")
  @@index([durationYears], map: "idx_university_direction_duration")
  @@index([costPerYear], map: "idx_university_direction_cost")
}

model DirectionTranslation {
  id          Int             @id @default(autoincrement())
  directionId Int             @map("direction_id")
  locale      String          @db.VarChar(5)
  name        String?         @db.VarChar(255)
  description String?         @db.Text
  /// Локализованный slug для SEO и маршрутизации
  slug        String          @db.VarChar(255)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Relations
  direction   StudyDirection  @relation(fields: [directionId], references: [id], onDelete: Cascade)

  @@unique([directionId, locale])
  @@unique([locale, slug], name: "unique_direction_slug_per_locale")
  @@map("direction_translations")
}

// ==========================================
// Enums
// ==========================================

enum UniversityType {
  state
  private
  tech
  elite
}

enum DegreeType {
  bachelor
  master
  phd
}

enum ReviewType {
  student
  parent
}

enum ApplicationStatus {
  submitted
  processing
  approved
  rejected
}

enum FacilityType {
  academic      // Академические (библиотека, лаборатории, аудитории)
  recreational  // Развлекательные (спортзал, бассейн, клубы)
  accommodation // Проживание (общежития)
  dining       // Питание (столовые, кафе)
  sports       // Спорт (стадионы, площадки)
  medical      // Медицинские (медцентр, аптека)
  transport    // Транспорт (парковки, автобусы)
  technology   // Технологии (Wi-Fi, компьютерные классы)
  support      // Поддержка (администрация, безопасность)
}

enum DormitoryType {
  male
  female
  mixed
}

enum ScholarshipType {
  government
  university
  private
}

enum ImportantDateType {
  deadline
  event
  exam
  notification
}

// Типы медиа для UniversityMedia
enum MediaKind {
  image
  video
}