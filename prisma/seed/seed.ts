import prismaPkg from '@prisma/client'
import { seedFAQs } from './faqs'
import { seedFaqCategories } from './faq-categories'
import { seedLocations } from './locations'
import { seedReviews } from './reviews'
import { seedBlog } from './blog'
import { seedStudyDirections } from './study-directions'
import { seedServices } from './services'
const { PrismaClient } = prismaPkg as any

const prisma = new PrismaClient()

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–¥–µ—Ä–æ–≤ —Å –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
interface Seeder {
  name: string
  description: string
  tables: string[] // –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
  dependencies?: string[] // –î—Ä—É–≥–∏–µ —Å–∏–¥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω—ã –ø–µ—Ä–µ–¥ —ç—Ç–∏–º
  run: (prisma: any, context?: any) => Promise<any>
}

const seeders: Record<string, Seeder> = {
  locations: {
    name: 'locations',
    description: '–°—Ç—Ä–∞–Ω—ã –∏ –≥–æ—Ä–æ–¥–∞',
    tables: ['cityTranslation', 'city', 'countryTranslation', 'country'],
    run: async (prisma) => await seedLocations(prisma),
  },
  'study-directions': {
    name: 'study-directions',
    description: '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è',
    tables: ['studyDirectionTranslation', 'studyDirection'],
    run: async (prisma) => await seedStudyDirections(prisma),
  },
  reviews: {
    name: 'reviews',
    description: '–û—Ç–∑—ã–≤—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤',
    tables: ['universityReviewTranslation', 'universityReview'],
    run: async (prisma) => await seedReviews(prisma),
  },
  'faq-categories': {
    name: 'faq-categories',
    description: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ FAQ',
    tables: ['faqCategoryTranslation', 'faqCategory'],
    run: async (prisma) => await seedFaqCategories(prisma),
  },
  faqs: {
    name: 'faqs',
    description: 'FAQ –≤–æ–ø—Ä–æ—Å—ã',
    tables: ['faqTranslation', 'faq'],
    dependencies: ['faq-categories'],
    run: async (prisma, context) => await seedFAQs(prisma, context.faqCategoryMap),
  },
  blog: {
    name: 'blog',
    description: '–ë–ª–æ–≥ —Å—Ç–∞—Ç—å–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
    tables: ['blogArticleTranslation', 'blogArticle', 'blogCategoryTranslation', 'blogCategory'],
    run: async (prisma) => await seedBlog(prisma),
  },
  services: {
    name: 'services',
    description: '–°–µ—Ä–≤–∏—Å—ã –∏ –ø–æ–¥—Å–µ—Ä–≤–∏—Å—ã',
    tables: [],
    run: async (prisma) => await seedServices(prisma),
  },
}

async function clearTables(tables: string[]) {
  if (tables.length === 0) return

  console.log(`üßπ Clearing tables: ${tables.join(', ')}...`)

  const deleteOperations = tables.map((table) => {
    return (prisma as any)[table].deleteMany()
  })

  await prisma.$transaction(deleteOperations)
  console.log('‚úÖ Tables cleared')
}

function resolveDependencies(selectedSeeders: string[]): string[] {
  const resolved = new Set<string>()
  const queue = [...selectedSeeders]

  while (queue.length > 0) {
    const current = queue.shift()!
    if (resolved.has(current)) continue

    const seeder = seeders[current]
    if (!seeder) {
      console.warn(`‚ö†Ô∏è  Seeder "${current}" not found, skipping...`)
      continue
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    if (seeder.dependencies) {
      for (const dep of seeder.dependencies) {
        if (!resolved.has(dep)) {
          queue.unshift(dep) // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤—ã–º–∏
        }
      }
    }

    resolved.add(current)
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const sorted: string[] = []
  const visited = new Set<string>()

  function visit(name: string) {
    if (visited.has(name)) return
    visited.add(name)

    const seeder = seeders[name]
    if (seeder?.dependencies) {
      for (const dep of seeder.dependencies) {
        if (resolved.has(dep)) {
          visit(dep)
        }
      }
    }

    sorted.push(name)
  }

  for (const name of resolved) {
    visit(name)
  }

  return sorted
}

async function main() {
  // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const args = process.argv.slice(2)
  let selectedSeeders: string[]

  if (args.length === 0 || args.includes('--all')) {
    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏–¥–µ—Ä–æ–≤
    selectedSeeders = Object.keys(seeders)
    console.log('üå± Starting full database seeding...')
  } else if (args.includes('--help') || args.includes('-h')) {
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    console.log('\nüìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: pnpm db:seed [options] [seeders...]\n')
    console.log('–û–ø—Ü–∏–∏:')
    console.log('  --all, -a          –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–∏–¥–µ—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
    console.log('  --help, -h         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n')
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–¥–µ—Ä—ã:')
    for (const [key, seeder] of Object.entries(seeders)) {
      const deps = seeder.dependencies ? ` (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç: ${seeder.dependencies.join(', ')})` : ''
      console.log(`  ${key.padEnd(20)} ${seeder.description}${deps}`)
    }
    console.log('\n–ü—Ä–∏–º–µ—Ä—ã:')
    console.log('  pnpm db:seed --all              # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–∏–¥–µ—Ä—ã')
    console.log('  pnpm db:seed blog reviews       # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ blog –∏ reviews')
    console.log(
      '  pnpm db:seed faqs               # –ó–∞–ø—É—Å—Ç–∏—Ç—å faqs (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç faq-categories)\n',
    )
    process.exit(0)
  } else {
    // –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–∏–¥–µ—Ä–æ–≤
    selectedSeeders = args.filter((arg) => !arg.startsWith('--'))
    console.log(`üå± Starting selective database seeding: ${selectedSeeders.join(', ')}...`)
  }

  // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  const seedersToRun = resolveDependencies(selectedSeeders)

  if (seedersToRun.length === 0) {
    console.log('‚ö†Ô∏è  No valid seeders selected')
    process.exit(0)
  }

  console.log(`\nüìã Seeders to run (in order): ${seedersToRun.join(' ‚Üí ')}\n`)

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
  const tablesToClear = new Set<string>()
  for (const name of seedersToRun) {
    const seeder = seeders[name]
    if (!seeder) continue
    for (const table of seeder.tables) {
      tablesToClear.add(table)
    }
  }

  // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
  await clearTables(Array.from(tablesToClear).reverse())

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–¥–µ—Ä—ã
  const context: any = {}
  for (const name of seedersToRun) {
    const seeder = seeders[name]
    if (!seeder) continue
    console.log(`\n${getEmoji(name)} Seeding ${seeder.description}...`)
    const result = await seeder.run(prisma, context)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–∏–¥–µ—Ä–æ–≤
    if (name === 'faq-categories') {
      context.faqCategoryMap = result
    }
  }

  console.log('\n‚úÖ Database seeding completed!')
}

function getEmoji(seederName: string): string {
  const emojiMap: Record<string, string> = {
    locations: 'üó∫Ô∏è',
    'study-directions': 'üìö',
    reviews: '‚≠ê',
    'faq-categories': 'üìÇ',
    faqs: '‚ùì',
    blog: 'üì∞',
    services: 'üõ†Ô∏è',
  }
  return emojiMap[seederName] || 'üå±'
}

main()
  .catch((e) => {
    console.error('‚ùå Database seeding failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
