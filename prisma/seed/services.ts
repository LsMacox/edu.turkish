import type { PrismaClient } from '@prisma/client'

// Category slugs in order
const CATEGORY_SLUGS = [
  'document-translations',
  'relocation-in-turkey',
  'tr-yos-courses',
  'sat-courses',
  'turkish-english-course',
] as const

const LOCALES = ['ru', 'en', 'kk', 'tr'] as const

type SubServiceSeed = {
  name: string
  description?: string
  priceUsd: number
  deliveryTimeDays?: number | null
  type?: 'offering' | 'calculator'
}

type CategorySeed = {
  title?: string
  subtitle?: string | null
  metadata?: Record<string, any> | null
  subServices?: Record<string, SubServiceSeed>
  expressMultiplier?: number
  rushMultiplier?: number
}

const SERVICES_SEED: Record<(typeof CATEGORY_SLUGS)[number], CategorySeed> = {
  'document-translations': {
    title: '–ü–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
    expressMultiplier: 1.5,
    rushMultiplier: 2.0,
    subServices: {
      'calculator-standard': {
        name: 'calculator-standard',
        priceUsd: 20,
        type: 'calculator',
      },
      'notarized-translation': {
        name: '–ù–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ –∑–∞–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥',
        description: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–º –∑–∞–≤–µ—Ä–µ–Ω–∏–µ–º, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞–º–∏ –¢—É—Ä—Ü–∏–∏',
        priceUsd: 20,
        deliveryTimeDays: 5,
      },
      'apostille-translation': {
        name: '–ê–ø–æ—Å—Ç–∏–ª—å + –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥',
        description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–ø–æ—Å—Ç–∏–ª—è –∏ –Ω–æ—Ç–∞—Ä–∏–∞–ª—å–Ω–æ –∑–∞–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞',
        priceUsd: 40,
        deliveryTimeDays: 10,
      },
      'consular-legalization': {
        name: '–ö–æ–Ω—Å—É–ª—å—Å–∫–∞—è –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏—è',
        description: '–î–ª—è —Å—Ç—Ä–∞–Ω –≤–Ω–µ –ì–∞–∞–≥—Å–∫–æ–π –∫–æ–Ω–≤–µ–Ω—Ü–∏–∏: –∫–æ–Ω—Å—É–ª—å—Å–∫–∞—è –ª–µ–≥–∞–ª–∏–∑–∞—Ü–∏—è + –ø–µ—Ä–µ–≤–æ–¥',
        priceUsd: 60,
        deliveryTimeDays: 14,
      },
    },
  },
  'relocation-in-turkey': {
    title: '–ü–µ—Ä–µ–µ–∑–¥ –≤ –¢—É—Ä—Ü–∏—é',
    subServices: {
      'starter-30d': {
        name: '–°—Ç–∞—Ä—Ç–æ–≤—ã–π 30 –¥–Ω–µ–π',
        description: 'SIM, vergi numarasƒ±, –±–∞–Ω–∫, –∂–∏–ª—å—ë, –ø–æ–¥–∞—á–∞ –Ω–∞ –í–ù–ñ. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 30 –¥–Ω–µ–π',
        priceUsd: 499,
        deliveryTimeDays: 30,
      },
      'premium-60d': {
        name: '–ü—Ä–µ–º–∏—É–º 60 –¥–Ω–µ–π',
        description: '–ü–æ–ª–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–ª–æ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 60 –¥–Ω–µ–π',
        priceUsd: 899,
        deliveryTimeDays: 60,
      },
    },
  },
  'tr-yos-courses': {
    title: '–ö—É—Ä—Å—ã TR-Y√ñS',
    subServices: {
      basic: {
        name: '–ë–∞–∑–æ–≤—ã–π',
        description: '8 –Ω–µ–¥–µ–ª—å, –≥—Ä—É–ø–ø–∞ –¥–æ 10 —á–µ–ª–æ–≤–µ–∫, –ø—Ä–æ–±–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã',
        priceUsd: 299,
        deliveryTimeDays: 56,
      },
      standard: {
        name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
        description: '–ë–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Ä–∞–∑–±–æ—Ä–æ–≤. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ 60‚Äì70 –±–∞–ª–ª–∞–º',
        priceUsd: 499,
        deliveryTimeDays: 56,
      },
      premium: {
        name: '–ü—Ä–µ–º–∏—É–º',
        description: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –∏ –ø–ª–∞–Ω –ø–æ–¥ –≤–∞—Å. –¶–µ–ª—å 70+',
        priceUsd: 799,
        deliveryTimeDays: 56,
      },
    },
  },
  'sat-courses': {
    title: '–ö—É—Ä—Å—ã SAT',
    subServices: {
      foundation: {
        name: 'Foundation',
        description: '–°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ Digital SAT, –æ—Å–Ω–æ–≤—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π',
        priceUsd: 399,
        deliveryTimeDays: 84,
      },
      advanced: {
        name: 'Advanced',
        description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª–Ω–æ—Ñ–æ—Ä–º–∞—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã',
        priceUsd: 699,
        deliveryTimeDays: 84,
      },
      elite: {
        name: 'Elite',
        description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
        priceUsd: 999,
        deliveryTimeDays: 84,
      },
    },
  },
  'turkish-english-course': {
    title: '–ö—É—Ä—Å—ã —Ç—É—Ä–µ—Ü–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ',
    subServices: {
      'a1-a2': {
        name: 'A1 ‚Üí A2',
        description: '–ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –±—ã—Ç–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏',
        priceUsd: 199,
        deliveryTimeDays: 56,
      },
      'b1-b2': {
        name: 'B1 ‚Üí B2',
        description: '–†–∞–±–æ—á–∏–µ –≤—Å—Ç—Ä–µ—á–∏, –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è –¥–∏—Å–∫—É—Å—Å–∏—è, —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã',
        priceUsd: 349,
        deliveryTimeDays: 84,
      },
      'c1-c2': {
        name: 'C1 ‚Üí C2',
        description: '–£—Ä–æ–≤–µ–Ω—å –Ω–æ—Å–∏—Ç–µ–ª—è: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∏ –Ω—é–∞–Ω—Å—ã —Ä–µ—á–∏',
        priceUsd: 549,
        deliveryTimeDays: 84,
      },
    },
  },
}

export async function seedServices(prisma: PrismaClient) {
  console.log('üå± Seeding services...')

  const servicesData = SERVICES_SEED as Record<string, CategorySeed>

  for (const [index, categorySlug] of CATEGORY_SLUGS.entries()) {
    const categoryData = servicesData[categorySlug]

    if (!categoryData) {
      console.warn(`‚ö†Ô∏è  No data found for category: ${categorySlug}`)
      continue
    }

    console.log(`  üì¶ Processing category: ${categorySlug}`)

    const { title, subtitle, subServices, metadata } = (categoryData || {}) as CategorySeed
    const hasMetadata = !!(metadata && Object.keys(metadata as any).length > 0)

    // Upsert ServiceCategory
    const category = await prisma.serviceCategory.upsert({
      where: { slug: categorySlug },
      update: {
        order: index + 1,
        isActive: true,
        ...(typeof (categoryData as any).expressMultiplier === 'number'
          ? { expressMultiplier: (categoryData as any).expressMultiplier }
          : {}),
        ...(typeof (categoryData as any).rushMultiplier === 'number'
          ? { rushMultiplier: (categoryData as any).rushMultiplier }
          : {}),
      },
      create: {
        slug: categorySlug,
        order: index + 1,
        isActive: true,
        ...(typeof (categoryData as any).expressMultiplier === 'number'
          ? { expressMultiplier: (categoryData as any).expressMultiplier }
          : {}),
        ...(typeof (categoryData as any).rushMultiplier === 'number'
          ? { rushMultiplier: (categoryData as any).rushMultiplier }
          : {}),
      },
    })

    // Build per-locale priceCalculator metadata for 'document-translations'
    const perLocaleMetadata: Record<string, any> | null =
      categorySlug === 'document-translations'
        ? {
            ru: {
              priceCalculator: {
                documentTypes: [
                  '–î–∏–ø–ª–æ–º',
                  '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç',
                  '–ü–∞—Å–ø–æ—Ä—Ç',
                  '–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏',
                  '–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –±—Ä–∞–∫–µ',
                  '–î—Ä—É–≥–æ–µ',
                ],
                languages: [
                  '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –¢—É—Ä–µ—Ü–∫–∏–π',
                  '–†—É—Å—Å–∫–∏–π ‚Üí –¢—É—Ä–µ—Ü–∫–∏–π',
                  '–ö–∞–∑–∞—Ö—Å–∫–∏–π ‚Üí –¢—É—Ä–µ—Ü–∫–∏–π',
                  '–¢—É—Ä–µ—Ü–∫–∏–π ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
                ],
                urgency: [
                  '–°—Ç–∞–Ω–¥–∞—Ä—Ç (5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)',
                  '–≠–∫—Å–ø—Ä–µ—Å—Å (2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è)',
                  '–°—Ä–æ—á–Ω–æ (24 —á–∞—Å–∞)',
                ],
                adjustments: {
                  byDocumentType: [1, 1.2, 1.1, 1.3, 1.4, 1],
                  byLanguage: [1, 1.1, 1.05, 1.2],
                },
              },
            },
            en: {
              priceCalculator: {
                documentTypes: [
                  'Diploma',
                  'Transcript',
                  'Passport',
                  'Birth Certificate',
                  'Marriage Certificate',
                  'Other',
                ],
                languages: [
                  'English ‚Üí Turkish',
                  'Russian ‚Üí Turkish',
                  'Kazakh ‚Üí Turkish',
                  'Turkish ‚Üí English',
                ],
                urgency: [
                  'Standard (5 business days)',
                  'Express (2 business days)',
                  'Rush (24 hours)',
                ],
                adjustments: {
                  byDocumentType: [1, 1.2, 1.1, 1.3, 1.4, 1],
                  byLanguage: [1, 1.1, 1.05, 1.2],
                },
              },
            },
            kk: {
              priceCalculator: {
                documentTypes: [
                  '–î–∏–ø–ª–æ–º',
                  '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç',
                  '–ü–∞—Å–ø–æ—Ä—Ç',
                  '–¢—É—É —Ç—É—Ä–∞–ª—ã –∫—É”ô–ª—ñ–∫',
                  '–ù–µ–∫–µ —Ç—É—Ä–∞–ª—ã –∫—É”ô–ª—ñ–∫',
                  '–ë–∞—Å“õ–∞',
                ],
                languages: [
                  '–ê“ì—ã–ª—à—ã–Ω ‚Üí –¢“Ø—Ä—ñ–∫',
                  '–û—Ä—ã—Å ‚Üí –¢“Ø—Ä—ñ–∫',
                  '“ö–∞–∑–∞“õ ‚Üí –¢“Ø—Ä—ñ–∫',
                  '–¢“Ø—Ä—ñ–∫ ‚Üí –ê“ì—ã–ª—à—ã–Ω',
                ],
                urgency: [
                  '–°—Ç–∞–Ω–¥–∞—Ä—Ç (5 –∂“±–º—ã—Å –∫“Ø–Ω—ñ)',
                  '–≠–∫—Å–ø—Ä–µ—Å—Å (2 –∂“±–º—ã—Å –∫“Ø–Ω—ñ)',
                  '–®“±“ì—ã–ª (24 —Å–∞“ì–∞—Ç)',
                ],
                adjustments: {
                  byDocumentType: [1, 1.2, 1.1, 1.3, 1.4, 1],
                  byLanguage: [1, 1.1, 1.05, 1.2],
                },
              },
            },
            tr: {
              priceCalculator: {
                documentTypes: [
                  'Diploma',
                  'Transkript',
                  'Pasaport',
                  'Doƒüum Belgesi',
                  'Evlilik Belgesi',
                  'Diƒüer',
                ],
                languages: [
                  'ƒ∞ngilizce ‚Üí T√ºrk√ße',
                  'Rus√ßa ‚Üí T√ºrk√ße',
                  'Kazak√ßa ‚Üí T√ºrk√ße',
                  'T√ºrk√ße ‚Üí ƒ∞ngilizce',
                ],
                urgency: [
                  'Standart (5 i≈ü g√ºn√º)',
                  'Ekspres (2 i≈ü g√ºn√º)',
                  'Acil (24 saat)',
                ],
                adjustments: {
                  byDocumentType: [1, 1.2, 1.1, 1.3, 1.4, 1],
                  byLanguage: [1, 1.1, 1.05, 1.2],
                },
              },
            },
          }
        : null

    // Upsert translations for all locales, only updating metadata when provided
    for (const locale of LOCALES) {
      const localeMetadata = (perLocaleMetadata && perLocaleMetadata[locale]) || (hasMetadata ? metadata : undefined)

      await prisma.serviceCategoryTranslation.upsert({
        where: {
          serviceCategoryId_locale: {
            serviceCategoryId: category.id,
            locale,
          },
        },
        update: (() => {
          const updateData: Record<string, any> = {
            title: title || categorySlug,
            subtitle: subtitle || null,
            slug: categorySlug,
          }
          if (localeMetadata) {
            updateData.metadata = localeMetadata
          }
          return updateData
        })(),
        create: {
          serviceCategoryId: category.id,
          locale,
          title: title || categorySlug,
          subtitle: subtitle || null,
          slug: categorySlug,
          ...(localeMetadata ? { metadata: localeMetadata } : {}),
        },
      })
    }

    // Process sub-services
    if (subServices && typeof subServices === 'object') {
      const subServiceEntries = Object.entries(subServices)

      for (const [subIndex, [subSlug, subData]] of subServiceEntries.entries()) {
        const subServiceData = subData as any

        const priceUsd = Number(subServiceData.priceUsd)
        if (!isFinite(priceUsd)) {
          console.warn(`    ‚ö†Ô∏è  Invalid USD price for sub-service: ${subSlug}`)
          continue
        }

        console.log(
          `    ‚îú‚îÄ Sub-service: ${subSlug} ($${priceUsd})` +
            (subServiceData.type === 'calculator' ? ' [calculator]' : '')
        )

        // Upsert SubService
        const subService = await prisma.subService.upsert({
          where: {
            serviceCategoryId_slug: {
              serviceCategoryId: category.id,
              slug: subSlug,
            },
          },
          update: {
            priceUsd,
            deliveryTimeDays: subServiceData.deliveryTimeDays ?? null,
            order: subIndex + 1,
            isActive: true,
            ...(subServiceData.type ? { type: subServiceData.type as any } : {}),
          },
          create: {
            serviceCategoryId: category.id,
            slug: subSlug,
            priceUsd,
            deliveryTimeDays: subServiceData.deliveryTimeDays ?? null,
            order: subIndex + 1,
            isActive: true,
            ...(subServiceData.type ? { type: subServiceData.type as any } : {}),
          },
        })

        // Upsert Russian translation for sub-service
        await prisma.subServiceTranslation.upsert({
          where: {
            subServiceId_locale: {
              subServiceId: subService.id,
              locale: 'ru',
            },
          },
          update: {
            name: subServiceData.name || subSlug,
            description: subServiceData.description || '',
          },
          create: {
            subServiceId: subService.id,
            locale: 'ru',
            name: subServiceData.name || subSlug,
            description: subServiceData.description || '',
          },
        })
      }
    }

    console.log(`  ‚úÖ Category ${categorySlug} seeded`)
  }

  // Count results
  const categoryCount = await prisma.serviceCategory.count()
  const subServiceCount = await prisma.subService.count()

  console.log(`\n‚úÖ Services seeded successfully!`)
  console.log(`   üìä ${categoryCount} categories`)
  console.log(`   üìä ${subServiceCount} sub-services`)
}
